描述

bobo has a sequence a1,a2,…,an. He is allowed to swap two adjacent numbers for no more than k times.

Find the minimum number of inversions after his swaps.

Note: The number of inversions is the number of pair (i,j) where 1≤i<j≤n and ai>aj.

输入描述

The input consists of several tests. For each tests:

The first line contains 2 integers n,k (1≤n≤105,0≤k≤109). The second line contains n integers a1,a2,…,an (0≤ai≤109).

输出描述

For each tests:

A single integer denotes the minimum number of inversions.

用例输入 1 

3 1
2 2 1
3 0
2 2 1
用例输出 1 

1
2


#include<iostream>
#include<vector>
using namespace std;
long long merge(int a[],int s,int m,int e) {
    vector<int> a1;
    int m1=s,m2=m+1;long long c=0L;
    while(m1<=m&&m2<=e){
        if(a[m1]>a[m2]){
            c+=m-m1+1;
            a1.push_back(a[m2]);
            m2++;
        }
        else{
            a1.push_back(a[m1]);
            m1++;
        }
    }
    while(m1<=m){
        a1.push_back(a[m1]);
        m1++;
    }
    while(m2<=e){
        a1.push_back(a[m2]);
        m2++;
    }
    int k=0;
    for(int i=s;i<=e;i++) a[i]=a1[k++];
    return c;
}
long long solve(int a[],int s,int e) {
    if(s>=e) return 0;
    long long m=(s+e)/2;
    long long l=solve(a,s,m);
    long long r=solve(a,m+1,e);
    long long l_r=merge(a,s,m,e);
    return l+r+l_r;
}
 
int main(){
    int n;
    int b;
    while(cin>>n>>b){
        int* a=new int[n];
        for(int i=0;i<n;i++) scanf("%d",&a[i]);
        long long sum=solve(a,0,n-1);
        cout<<(sum-b>0?sum-b:0)<<endl;
    }
    return 0;
}
 