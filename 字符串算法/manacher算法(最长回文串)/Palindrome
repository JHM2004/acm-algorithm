出题人：

描述

Andy the smart computer science student was attending an algorithms class when the professor asked the students a simple question, “Can you propose an efficient algorithm to find the length of the largest palindrome in a string?”

A string is said to be a palindrome if it reads the same both forwards and backwards, for example “madam” is a palindrome while “acm” is not.

The students recognized that this is a classical problem but couldn’t come up with a solution better than iterating over all substrings and checking whether they are palindrome or not, obviously this algorithm is not efficient at all, after a while Andy raised his hand and said “Okay, I’ve a better algorithm” and before he starts to explain his idea he stopped for a moment and then said “Well, I’ve an even better algorithm!”.

If you think you know Andy’s final solution then prove it! Given a string of at most 1000000 characters find and print the length of the largest palindrome inside this string.

输入描述

Your program will be tested on at most 30 test cases, each test case is given as a string of at most 1000000 lowercase characters on a line by itself. The input is terminated by a line that starts with the string “END” (quotes for clarity).

输出描述

For each test case in the input print the test case number and the length of the largest palindrome.

用例输入 1 

abcbabcbabcba
abacacbaaaab
END
用例输出 1 

Case 1: 13
Case 2: 6
来源
POJ 3974



#include<stdio.h>
#include<string.h>
#include<algorithm> 
//最长回文串，经典manacher算法（马拉车算法），板子题
const int maxn=3e6+10;
char t[maxn],//原字符串
s[maxn];//标记完‘@’‘#’‘￥’后的字符串(预处理后的字符串)
int p[maxn];//记录的是以此坐标为中心，向两端扩展的最长回文串长度
int len1,len2;

//比较大小功能的max与min的类模版
template<class T>
T min(T a,T b){
	return a>b?(b):(a);
} 
template<class T>
T max(T a,T b){
	return a>b?(a):(b);
} 

void init(){
	s[0]='@';
	s[1]='#';
	for(int i=0;i<len1;i++){
		s[i*2+2]=t[i];
		s[i*2+3]='#';
	}
	len2=len1*2+2;
	s[len2]='$';
}
//manacher的核心代码实现
void mancher(){
	int id=0,mx=0;
	p[0]=0;
	for(int i=1;i<len2;i++){
		if(mx>i){
			p[i]=min(mx-i,p[2*id-i]);
		}else{
			p[i]=1;
		}
		while(s[i+p[i]]==s[i-p[i]])p[i]++;
		if(i+p[i]>mx){
			mx=i+p[i];id=i;
		}
	}
}

int main(){
	int k=1;
	while(scanf("%s",t)&&t[0]!='E'){
		len1=strlen(t);
		init();
		mancher();
		int maxlen=0;
		for(int i=0;i<len2;i++){
			maxlen=max(maxlen,p[i]);
		}
		printf("Case %d: ",k++);
		printf("%d\n",maxlen-1);
	}
}
