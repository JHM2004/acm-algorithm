
描述

某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？

输入描述

测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( < 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。
注意:两个城市之间可以有多条道路相通,也就是说
3 3
1 2
1 2
2 1
这种输入也是合法的
当N为0时，输入结束，该用例不被处理。

输出描述

对每个测试用例，在1行里输出最少还需要建设的道路数目。

用例输入 1 

4 2
1 3
4 3
3 3
1 2
1 3
2 3
5 2
1 2
3 5
999 0
0
用例输出 1 

1
0
2
998
来源
HDU-1232




#include<iostream>
#include<vector>
#include<algorithm>
#include<set>
#include<unordered_set>
using namespace std;
#define N 1004
int n,father[N];
void init()
{
  	for(int i=1;i<N;i++)father[i]=i;
}
int getFather(int u)
{
    if(father[u]!=u)father[u]=getFather(father[u]);return father[u];
}
void Union(int x,int y)
{
    int fx=getFather(x),fy=getFather(y);
    if(fx!=fy)
    {
        father[fx]=fy;
    }
}
int main()
{
    int n,m;
    while(cin>>n&&n)
    {
        cin>>m;
        init();
        vector<vector<int>>arr(m,vector<int>(2));
        for(int i=0;i<m;i++)
        {
			for(int j=0;j<2;j++)
            {
            	cin>>arr[i][j];
            }
        }
         for(int i=0;i<m;i++)
                 {
                     Union(arr[i][0],arr[i][1]);
                 }  
        //以合并
        unordered_set<int>index;
        for(int i=0;i<n;i++)
        {
            index.insert(getFather(i+1));
        } 
        cout<<index.size()-1<<endl;
    }

    return 0;
}


