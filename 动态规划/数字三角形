描述

给定一个如下图所示的数字三角形，从顶部出发，在每一结点可以选择移动至其左下方的结点或移动至其右下方的结点，一直走到底层，要求找出一条路径，使路径上的数字的和最大。
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5

输入描述

第一行包含整数 n，表示数字三角形的层数。

接下来 n行，每行包含若干整数，其中第i行表示数字三角形第 i层包含的整数。
1≤n≤500,−10000≤三角形中的整数≤10000

输出描述

输出一个整数，表示最大的路径数字和。

用例输入 1 

5
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5
用例输出 1 

30


#include<bits/stdc++.h>
using namespace std;
const int N=505;
int a[N][N],dp[N][N];
int main()
{
	int n;cin>>n;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=i;j++)
        {
            cin>>a[i][j];
        }
    }
    dp[1][1]=a[1][1];
    for(int i=2;i<=n;i++)
    {
        for(int j=1;j<=i;j++)
        {
            if(j!=1&&j!=i)dp[i][j]=max(dp[i-1][j-1],dp[i-1][j])+a[i][j];
            else if(j==1)dp[i][j]=dp[i-1][j]+a[i][j];
            else dp[i][j]=dp[i-1][j-1]+a[i][j];
        }
    }
    int maxx=-1e9;
    for(int i=1;i<=n;i++)
    {
        maxx=max(maxx,dp[n][i]);
    }
    cout<<maxx<<endl;
    return 0;
}
