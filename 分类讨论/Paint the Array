描述

You are given an array a consisting of n positive integers. You have to choose a positive integer d and paint all elements into two colors. All elements which are divisible by d will be painted red, and all other elements will be painted blue.

The coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Your task is to find any value of d which yields a beautiful coloring, or report that it is impossible.

输入描述

The first line contains a single integer t (1≤t≤1000) — the number of testcases.

The first line of each testcase contains one integer n (2≤n≤100) — the number of elements of the array.

The second line of each testcase contains n integers a 
1
​
 ,a 
2
​
 ,…,a 
n
​
  (1≤a 
i
​
 ≤10 
18
 ).

输出描述

For each testcase print a single integer. If there is no such value of d that yields a beautiful coloring, print 0. Otherwise, print any suitable value of d (1≤d≤10 
18
 ).

用例输入 1 

5
5
1 2 3 4 5
3
10 5 15
3
100 10 200
10
9 8 2 6 6 2 8 6 5 4
2
1 3
用例输出 1 

2
0
100
0
3
语言:
GNU GCC C11 5.1.0




#include<bits/stdc++.h>
#define int long long
using namespace std;
int my_gcd(int a,int b)
{
    if(b==0)return a;
    return my_gcd(b,a%b);
}
signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);cin.tie(0);
    int t;cin>>t;
    while(t--)
    {
        int n;cin>>n;
        vector<int>odd;
        vector<int>even;
        vector<int>arr(n);
        for(int i=0;i<n;i++)cin>>arr[i];
        for(int i=0;i<n;i++)
        {
            if(i&1)odd.emplace_back(arr[i]);
            else even.emplace_back(arr[i]);
        }
        
        sort(odd.begin(),odd.end());
        sort(even.begin(),even.end());
        
        int min_oddindex_num=odd[0];
        int min_evenindex_num=even[0];
        
        
        for(int i=1;i<odd.size();i++)
        {
            min_oddindex_num=my_gcd(odd[i],min_oddindex_num);
        }
        for(int i=1;i<even.size();i++)
        {
            min_evenindex_num=my_gcd(even[i],min_evenindex_num);
        }

        int ok=1;
        //奇数下标全整除
        if(min_oddindex_num==1)ok=0;
        if(ok==1)
        {
            for(int i=0;i<even.size();i++)
            {
                if(even[i]>=min_oddindex_num)
                {
                    if((even[i]%min_oddindex_num)==0)
                    {
                        ok=0;break;
                    }
                }
            }
        }
        if(ok==1)
        {
            cout<<min_oddindex_num<<endl;
            continue;
        }
        
        ok=1;
        if(min_evenindex_num==1)ok=0;
        //偶数下标全整除
        for(int i=0;i<odd.size();i++)
        {
            if((odd[i]>=min_evenindex_num)&&(odd[i]%min_evenindex_num==0))
            {
                ok=0;break;
            }
        }
        
        if(ok==1)
        {
            cout<<min_evenindex_num<<endl;
            continue;
        }
        
        
        
        cout<<0<<endl;
    }
    return 0;
}