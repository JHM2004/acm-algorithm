描述

Our Black Box represents a primitive database. It can save an integer array and has a special i variable. At the initial moment Black Box is empty and i equals 0. This Black Box processes a sequence of commands (transactions). There are two types of transactions:

ADD (x): put element x into Black Box;
GET: increase i by 1 and give an i-minimum out of all integers containing in the Black Box. Keep in mind that i-minimum is a number located at i-th place after Black Box elements sorting by non- descending.

Let us examine a possible sequence of 11 transactions:

Example 1

N Transaction i Black Box contents after transaction Answer 
      (elements are arranged by non-descending)   
1 ADD(3)      0 3   
2 GET         1 3                                    3 
3 ADD(1)      1 1, 3   
4 GET         2 1, 3                                 3 
5 ADD(-4)     2 -4, 1, 3   
6 ADD(2)      2 -4, 1, 2, 3   
7 ADD(8)      2 -4, 1, 2, 3, 8   
8 ADD(-1000)  2 -1000, -4, 1, 2, 3, 8   
9 GET         3 -1000, -4, 1, 2, 3, 8                1 
10 GET        4 -1000, -4, 1, 2, 3, 8                2 
11 ADD(2)     4 -1000, -4, 1, 2, 2, 3, 8   
It is required to work out an efficient algorithm which treats a given sequence of transactions. The maximum number of ADD and GET transactions: 30000 of each type.

Let us describe the sequence of transactions by two integer arrays:

A(1), A(2), …, A(M): a sequence of elements which are being included into Black Box. A values are integers not exceeding 2 000 000 000 by their absolute value, M <= 30000. For the Example we have A=(3, 1, -4, 2, 8, -1000, 2).

u(1), u(2), …, u(N): a sequence setting a number of elements which are being included into Black Box at the moment of first, second, … and N-transaction GET. For the Example we have u=(1, 2, 6, 6).

The Black Box algorithm supposes that natural number sequence u(1), u(2), …, u(N) is sorted in non-descending order, N <= M and for each p (1 <= p <= N) an inequality p <= u§ <= M is valid. It follows from the fact that for the p-element of our u sequence we perform a GET transaction giving p-minimum number from our A(1), A(2), …, A(u§) sequence.

输入描述

Input contains (in given order): M, N, A(1), A(2), …, A(M), u(1), u(2), …, u(N). All numbers are divided by spaces and (or) carriage return characters.

输出描述

Write to the output Black Box answers sequence for a given sequence of transactions, one number each line.

用例输入 1 

7 4
3 1 -4 2 8 -1000 2
1 2 6 6
用例输出 1 

3
3
1
2
来源

POJ1442



#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <queue>
#include <map>
#include <iostream>
#include <string>
using namespace std;
int main()
{
  int n,m,i,j;
  int b,sum=1;
  int x,y;
  int a[30010];
  priority_queue<int,vector<int>,greater<int> >p1;//小顶堆
  priority_queue<int >p2;//大顶堆
  scanf("%d %d",&m,&n);
  //存入每一个待add的值
  for(i=1;i<=m;i++)
    scanf("%d",&a[i]);
    
  for(int i=1;i<=n;i++)
  {
    scanf("%d",&b);
    while(sum<=b)
    {
      p1.push(a[sum]);
      if(!p2.empty()&&p1.top()<p2.top())
      {
        x=p2.top();
        y=p1.top();
        p2.pop();
        p1.pop();
        p2.push(y);
        p1.push(x);
      }
      sum++;
    }
    printf("%d\n",p1.top());
    p2.push(p1.top());
    p1.pop();
  }
  return 0;
}
