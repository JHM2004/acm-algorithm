出题人：

描述

You love fish, that's why you have decided to build an aquarium. You have a piece of coral made of n columns, the i-th of which is a 
i
​
  units tall. Afterwards, you will build a tank around the coral as follows:

Pick an integer h≥1 — the height of the tank. Build walls of height h on either side of the tank.
Then, fill the tank up with water so that the height of each column is h, unless the coral is taller than h; then no water should be added to this column.
For example, with a=[3,1,2,4,6,2,5] and a height of h=4, you will end up using a total of w=8 units of water, as shown.
You can use at most x units of water to fill up the tank, but you want to build the biggest tank possible. What is the largest value of h you can select?
输入描述

The first line contains a single integer t (1≤t≤10 
4
 ) — the number of test cases.

The first line of each test case contains two positive integers n and x (1≤n≤2⋅10 
5
 ; 1≤x≤10 
9
 ) — the number of columns of the coral and the maximum amount of water you can use.

The second line of each test case contains n space-separated integers a 
i
​
  (1≤a 
i
​
 ≤10 
9
 ) — the heights of the coral.

The sum of n over all test cases doesn't exceed 2⋅10 
5
 .

输出描述

For each test case, output a single positive integer h (h≥1) — the maximum height the tank can have, so you need at most x units of water to fill up the tank.

We have a proof that under these constraints, such a value of h always exists.

用例输入 1 

5
7 9
3 1 2 4 6 2 5
3 10
1 1 1
4 1
1 4 3 4
6 1984
2 6 5 9 1 8
1 1000000000
1
用例输出 1 

4
4
2
335
1000000001
提示

The first test case is pictured in the statement. With h=4 we need 8 units of water, but if h is increased to 5 we need 13 units of water, which is more than x=9. So h=4 is optimal.

In the second test case, we can pick h=4 and add 3 units to each column, using a total of 9 units of water. It can be shown that this is optimal.

In the third test case, we can pick h=2 and use all of our water, so it is optimal.


#include <bits/stdc++.h>
#define ll long long
using namespace std;

const int N = 2e5 + 5;
int t, n, x, a[N];

bool check(int h){//检查式子结果是否不超过 x
	ll c = 0;
	for(int i = 1; i <= n; i++)
		if(a[i] < h)
			c += h - a[i];
	return c <= x;
}

int main(){
	
	scanf("%d", &t);
	while(t--){
		scanf("%d %d", &n, &x);
		for(int i = 1; i <= n; i++)
			scanf("%d", a + i);
		int l = 1, r = 2e9, mid, ans;
        //二分查找的板子（越小越成立，越大越不成立の板子）
		while(l <= r){
			mid = (r - l >> 1) + l;
			if(check(mid)) l = mid + 1, ans = mid;
			else r = mid - 1;
		}
		printf("%d\n", ans);
	}
	
	return 0;
}