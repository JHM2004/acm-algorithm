
描述

We have a secret array. You don't know this array and you have to restore it. However, you know some facts about this array:

The array consists of n distinct positive (greater than 0) integers.
The array contains two elements x and y (these elements are known for you) such that x<y.
If you sort the array in increasing order (such that a 
1
​
 <a 
2
​
 <…<a 
n
​
 ), differences between all adjacent (consecutive) elements are equal (i.e. a 
2
​
 −a 
1
​
 =a 
3
​
 −a 
2
​
 =…=a 
n
​
 −a 
n−1
​
 ).
It can be proven that such an array always exists under the constraints given below.

Among all possible arrays that satisfy the given conditions, we ask you to restore one which has the minimum possible maximum element. In other words, you have to minimize max(a 
1
​
 ,a 
2
​
 ,…,a 
n
​
 ).

You have to answer t independent test cases.

输入描述

The first line of the input contains one integer t (1≤t≤100) — the number of test cases. Then t test cases follow.

The only line of the test case contains three integers n, x and y (2≤n≤50; 1≤x<y≤50) — the length of the array and two elements that are present in the array, respectively.

输出描述

For each test case, print the answer: n integers a 
1
​ 
 ,a 
2
​
 ,…,a 
n
​
  (1≤a 
i
​
 ≤10 
9
 ), where a 
i
​
  is the i-th element of the required array. If there are several answers, you can print any (it also means that the order of elements doesn't matter).

It can be proven that such an array always exists under the given constraints.

用例输入 1 

5
2 1 49
5 20 50
6 20 50
5 3 8
9 13 22
用例输出 1 

1 49 
20 40 30 50 10
26 32 20 38 44 50 
8 23 18 13 3 
1 10 13 4 19 22 25 16 7




#include<bits/stdc++.h>
#define int long long
using namespace std;
signed main()
{
    int t;cin>>t;
    while(t--)
    {
        int n,x,y;cin>>n>>x>>y;
        if(x>y)x^=y^=x^=y;
        
        //x<y 
        
        int d=y-x;
        
        //至少公差是r
        int r=(y-x+n-2)/(n-1);
        
        int rr=y-x;
        
        //公差范围：[r,rr];
        //ret是公差
        int ret;
        for(ret=r;ret<=rr;ret++)
        {
            if((d%ret)==0)break;  
        }
//ret没问题
        
        int countd=(y-1)/ret;
            if(countd+1>=n)
            {
                for(int i=y,nn=0;nn<n;i-=ret,nn++)
                {
                    cout<<i;
                    if(nn!=n-1)cout<<' ';
                }
                cout<<endl;
            }
        
        else 
        {
            for(int i=((y%ret)==0?ret:y%ret),count=0;count<n;i+=ret,count++)
            {
                cout<<i;
                if(count!=n-1)cout<<' ';
            }
            cout<<endl;
        }
    }
    return 0;
}
