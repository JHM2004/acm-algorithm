描述

You are given an array a consisting of n integers. You have to find the length of the smallest (shortest) prefix of elements you need to erase from a to make it a good array. Recall that the prefix of the array a=[a 
1
​
 ,a 
2
​
 ,…,a 
n
​
 ] is a subarray consisting several first elements: the prefix of the array a of length k is the array [a 
1
​
 ,a 
2
​
 ,…,a 
k
​
 ] (0≤k≤n).

The array b of length m is called good, if you can obtain a non-decreasing array c (c 
1
​
 ≤c 
2
​
 ≤⋯≤c 
m
​
 ) from it, repeating the following operation m times (initially, c is empty):

select either the first or the last element of b, remove it from b, and append it to the end of the array c.
For example, if we do 4 operations: take b 
1
​
 , then b 
m
​
 , then b 
m−1
​
  and at last b 
2
​
 , then b becomes [b 
3
​
 ,b 
4
​
 ,…,b 
m−3
​
 ] and c=[b 
1
​
 ,b 
m
​
 ,b 
m−1
​
 ,b 
2
​
 ].

Consider the following example: b=[1,2,3,4,4,2,1]. This array is good because we can obtain non-decreasing array c from it by the following sequence of operations:

take the first element of b, so b=[2,3,4,4,2,1], c=[1];
take the last element of b, so b=[2,3,4,4,2], c=[1,1];
take the last element of b, so b=[2,3,4,4], c=[1,1,2];
take the first element of b, so b=[3,4,4], c=[1,1,2,2];
take the first element of b, so b=[4,4], c=[1,1,2,2,3];
take the last element of b, so b=[4], c=[1,1,2,2,3,4];
take the only element of b, so b=[], c=[1,1,2,2,3,4,4] — c is non-decreasing.
Note that the array consisting of one element is good.

Print the length of the shortest prefix of a to delete (erase), to make a to be a good array. Note that the required length can be 0.

You have to answer t independent test cases.

输入描述

The first line of the input contains one integer t (1≤t≤2⋅10 
4
 ) — the number of test cases. Then t test cases follow.

The first line of the test case contains one integer n (1≤n≤2⋅10 
5
 ) — the length of a. The second line of the test case contains n integers a 
1
​
 ,a 
2
​
 ,…,a 
n
​
  (1≤a 
i
​
 ≤2⋅10 
5
 ), where a 
i
​
  is the i-th element of a.

It is guaranteed that the sum of n does not exceed 2⋅10 
5
  (∑n≤2⋅10 
5
 ).

输出描述

For each test case, print the answer: the length of the shortest prefix of elements you need to erase from a to make it a good array.

用例输入 1 

5
4
1 2 3 4
7
4 3 3 8 4 5 2
3
1 1 1
7
1 3 1 4 5 3 2
5
5 4 3 2 3
用例输出 1 

0
4
0
2
3
提示

In the first test case of the example, the array a is already good, so we don't need to erase any prefix.

In the second test case of the example, the initial array a is not good. Let's erase first 4 elements of a, the result is [4,5,2]. The resulting array is good. You can prove that if you erase fewer number of first elements, the result will not be good.




#include<bits/stdc++.h>
using namespace std;
int main()
{
    int t;cin>>t;
    while(t--)
    {
        int n;cin>>n;
        vector<int>arr(n);
        for(int i=0;i<n;i++)cin>>arr[i];
        int max_hou=arr[n-1];
        int max_hou_index=n-1;
        
        //单调栈
        stack<int>st;
        int ok=0;
        int i;
        for(i=n-1;i>=0;i--)
        {
            if(st.empty())
            {
                st.push(arr[i]);
                continue;
            }
            while(!st.empty()&&st.top()<arr[i]&&!ok)
            {
                st.pop();
                st.push(arr[i]);
            }
            if(!st.empty()&&st.top()>arr[i])
            {
                ok=1;
                st.push(arr[i]);
            }
            if(!st.empty()&&st.top()<arr[i]&&ok)
            {
                break;
            }
        }
        cout<<(i+1)<<endl;
    }
    return 0;
}